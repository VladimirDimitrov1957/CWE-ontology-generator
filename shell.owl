Prefix: : <http://www.semanticweb.org/cht_c/cwe#>
Prefix: capec: <http://www.semanticweb.org/cht_c/capec#>
Prefix: cpe: <http://www.semanticweb.org/cht_c/cpe#>
Prefix: cve: <http://www.semanticweb.org/cht_c/cve#>
Prefix: dc: <http://purl.org/dc/elements/1.1/>
Prefix: owl: <http://www.w3.org/2002/07/owl#>
Prefix: rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
Prefix: rdfs: <http://www.w3.org/2000/01/rdf-schema#>
Prefix: xml: <http://www.w3.org/XML/1998/namespace>
Prefix: xsd: <http://www.w3.org/2001/XMLSchema#>



Ontology: <http://www.semanticweb.org/cht_c/cwe>

Import: <http://www.semanticweb.org/cht_c/capec>
Import: <http://www.semanticweb.org/cht_c/cpe>
Import: <http://www.semanticweb.org/cht_c/cve>

Annotations: 
    External_Reference ""^^rdfs:Literal,
    catalog "NAME
VERSION
DATE"@en,
    rdfs:comment "The CWE Schema is maintained by The MITRE Corporation and developed in partnership with the public CWE Community. For more information, including how to get involved in the project and how to submit change requests, please visit the CWE website at https://cwe.mitre.org.
Core Definition
6.5
20 July 2021
Copyright (c) 2006-2021, The MITRE Corporation. All rights reserved. The contents of this file are subject to the terms of the CWE License located at https://cwe.mitre.org/about/termsofuse.html. See the CWE License for the specific language governing permissions and limitations for use of this schema. When distributing copies of the CWE Schema, this license header must be included.",
    rdfs:isDefinedBy "Vladimir Dimitrov"@en,
    owl:versionInfo "1.1"@en

AnnotationProperty: Alternate_Term_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Weakness>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Audience_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#View>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Background_Detail

    Annotations: 
        rdfs:comment "The BackgroundDetailsType complex type contains one or more Background_Detail elements, each of which contains information that is relevant but not related to the nature of the weakness itself."^^rdfs:Literal
    
    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Weakness>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Body_Text

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Demonstrative_Example>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Consequence_Note

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Consequence>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Content_History

    Annotations: 
        rdfs:comment "The ContentHistoryType complex type provides elements to keep track of the original author of an entry and any subsequent modifications to the content. The required Submission element is used to identify the submitter and/or their organization, the date, and any optional comments related to an entry. The optional Modification element is used to identify a modifier's name, organization, the date, and any related comments. A new Modification element should exist for each change made to the content. Modifications that change the meaning of the entry, or how it might be interpreted, should be marked with an importance of critical to bring it to the attention of anyone previously dependent on the weakness. The optional Contribution element is used to identify a contributor's name, organization, the date, and any related comments. This element has a single Type attribute, which indicates whether the contribution was part of general feedback given or actual content that was donated. The optional Previous_Entry_Name element is used to describe a previous name that was used for the entry. This should be filled out whenever a substantive name change occurs. The required Date attribute lists the date on which this name change was made. A Previous_Entry_Name element should align with a corresponding Modification element.
The ImportanceEnumeration simple type lists different values for importance.
Weakness or Category or View"^^rdfs:Literal
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Detection_Method_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Detection_Method>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Effectiveness_Note

    Annotations: 
        rdfs:comment "Detection_Method or Potential_Mitigation"^^rdfs:Literal
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Exploitation_Factor

    Annotations: 
        rdfs:comment "The ExploitationFactorsType complex type points out conditions or factors that could increase the likelihood of exploit for this weakness."^^rdfs:Literal
    
    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Weakness>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Extended_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Weakness>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: External_Reference

    Annotations: 
        rdfs:comment "The ExternalReferenceType complex type defines a collection of elements that provide a pointer to where more information and deeper insight can be obtained. Examples would be a research paper or an excerpt from a publication.
Not all of the elements need to be used, since some are designed for web references and others are designed for book references. The Author and Title elements should be filled out for all references if possible; Author is optional, but Title is required. The optional Edition element identifies the edition of the material being referenced in the event that multiple editions of the material exist. If the reference is part of a magazine or journal, the Publication element should be used to identify the name. The optional Publication_Year, Publication_Month, Publication_Day, and Publisher elements should be used to more specifically identify the book or publication via its date and publisher. The year must follow the YYYY format while the month must follow the --MM format and the day must follow the ---DD format. The URL and URL_Date elements are used to capture a URL for the material being referenced, if one exists, and the date when the URL was validated to exist.
The required Reference_ID attribute exists to provide a globally unique identifier for the reference (e.g., REF-1). The ID is used by other entities to link to this external reference."^^rdfs:Literal
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Filter

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#View>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Intro_Text

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Demonstrative_Example>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Mode_Of_Introduction_Note

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Weakness>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Note_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Note>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Objective

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#View>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Observed_Example_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Observed_Example>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Potential_Mitigation_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Potential_Mitigation>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Reference

    Annotations: 
        rdfs:comment "The ReferencesType complex type contains one or more reference elements, each of which is used to link to an external reference defined within the catalog. The required External_Reference_ID attribute represents the external reference entry being linked to (e.g., REF-1). Text or quotes within the same CWE entity can cite this External_Reference_ID similar to how a footnote is used, and should use the format [REF-1]. The optional Section attribute holds any section title or page number that is specific to this use of the reference.
DemonstrativeExample or Weakness or Category or View or ObservedExample"^^rdfs:Literal
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Structured_Code

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Example_Code>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Summary

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Category>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Title_Text

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Demonstrative_Example>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Weakness_Description

    Domain: 
        <http://www.semanticweb.org/cht_c/cwe#Weakness>
    
    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: Weakness_Ordinality_Description

    Range: 
        <http://www.w3.org/2000/01/rdf-schema#Literal>
    
    
AnnotationProperty: catalog

    
AnnotationProperty: owl:versionInfo

    
AnnotationProperty: rdfs:comment

    Annotations: 
        rdfs:comment "CWE
4.5
2021-07-20
The CWE Schema is maintained by The MITRE Corporation and developed in partnership with the public CWE Community. For more information, including how to get involved in the project and how to submit change requests, please visit the CWE website at https://cwe.mitre.org.
Core Definition
6.5
20 July 2021
Copyright (c) 2006-2021, The MITRE Corporation. All rights reserved. The contents of this file are subject to the terms of the CWE License located at https://cwe.mitre.org/about/termsofuse.html. See the CWE License for the specific language governing permissions and limitations for use of this schema. When distributing copies of the CWE Schema, this license header must be included.
The Weakness_Catalog root element is used to describe a collection of security issues known as weaknesses (e.g., flaws, faults, bugs). Each catalog can be organized by optional Views and Categories. The catalog also contains a list of all External_References that may be shared throughout the individual weaknesses. The required Name and Version attributes are used to uniquely identify the catalog. The required Date attribute identifies the date when this catalog was created or last updated."^^rdfs:Literal
    
    
AnnotationProperty: rdfs:isDefinedBy

    
Datatype: rdf:PlainLiteral

    
Datatype: rdfs:Literal

    
Datatype: xsd:anyURI

    
Datatype: xsd:dateTime

    
Datatype: xsd:integer

    
Datatype: xsd:positiveInteger

    
Datatype: xsd:string

    
ObjectProperty: Applicable_Platform

    Annotations: 
        rdfs:comment "The ApplicablePlatformsType complex type specifies the languages, operating systems, architectures, and technologies in which a given weakness could appear. A technology represents a generally accepted feature of a system and often refers to a high-level functional component within a system. The required Prevalence attribute identifies the regularity with which the weakness is applicable to that platform. When providing an operating system name, an optional Common Platform Enumeration (CPE) identifier can be used to a identify a specific OS."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        Applicable_Platform
    
    
ObjectProperty: CPE_ID

    Characteristics: 
        Functional
    
    Domain: 
        Operating_System
    
    Range: 
        cpe:CPEEntry
    
    
ObjectProperty: CanAlsoBe

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    
ObjectProperty: CanFollow

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    InverseOf: 
        CanPrecede
    
    
ObjectProperty: CanPrecede

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    InverseOf: 
        CanFollow
    
    
ObjectProperty: ChildOf

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    InverseOf: 
        ParentOf
    
    
ObjectProperty: Common_Consequence

    Domain: 
        Weakness
    
    Range: 
        Consequence
    
    
ObjectProperty: Demonstrative_Example

    Annotations: 
        rdfs:comment "The DemonstrativeExamplesType complex type contains one or more Demonstrative_Example elements, each of which contains an example illustrating how a weakness may look in actual code. The optional Title_Text element provides a title for the example. The Intro_Text element describes the context and setting in which this code should be viewed, summarizing what the code is attempting to do. The Body_Text and Example_Code elements are a mixture of code and explanatory text about the example. The References element provides additional information.
The optional Demonstrative_Example_ID attribute is used by the internal CWE team to uniquely identify examples that are repeated across any number of individual weaknesses. To help make sure that the details of these common examples stay synchronized, the Demonstrative_Example_ID is used to quickly identify those examples across CWE that should be identical. The identifier is a string and should match the following format: DX-1.
The StructuredCodeType complex type is used to present source code examples. It allows embedded XHTML content to enable formatting of the source code. The required Nature attribute states what type of code the example shows.  The optional Language attribute states which source code language is used in the example. This is mostly appropriate when the Nature is \"good\" or \"bad\"."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        Demonstrative_Example
    
    
ObjectProperty: Detection_Method

    Annotations: 
        rdfs:comment "The DetectionMethodsType complex type is used to identify methods that may be employed to detect this weakness, including their strengths and limitations. The required Method element identifies the particular detection method being described. The required Description element is intended to provide some context of how this method can be applied to a specific weakness. The optional Effectiveness element says how effective the detection method may be in detecting the associated weakness. This assumes the use of best-of-breed tools, analysts, and methods. There is limited consideration for financial costs, labor, or time. The optional Effectiveness_Notes element provides additional discussion of the strengths and shortcomings of this detection method.
The optional Detection_Method_ID attribute is used by the internal CWE team to uniquely identify methods that are repeated across any number of individual weaknesses. To help make sure that the details of these common methods stay synchronized, the Detection_Method_ID is used to quickly identify those Detection_Method elements across CWE that should be identical. The identifier is a string and should match the following format: DM-1."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        Detection_Method
    
    
ObjectProperty: Example_Code

    Domain: 
        Demonstrative_Example
    
    Range: 
        Example_Code
    
    
ObjectProperty: Has_Member

    Domain: 
        Category or View
    
    Range: 
        Category or View or Weakness
    
    InverseOf: 
        Member_Of
    
    
ObjectProperty: Member_Of

    Domain: 
        Category or View or Weakness
    
    Range: 
        Category or View
    
    InverseOf: 
        Has_Member
    
    
ObjectProperty: Note

    Annotations: 
        rdfs:comment "The NotesType complex type contains one or more Note elements, each of which is used to provide any additional comments about an entry that cannot be captured using other elements."^^rdfs:Literal
    
    Domain: 
        Category or View or Weakness
    
    Range: 
        Note
    
    
ObjectProperty: Observed_Example

    Annotations: 
        rdfs:comment "The ObservedExampleType complex type specifies references to a specific observed instance of a weakness in real-world products. Typically this will be a CVE reference. Each Observed_Example element represents a single example. The optional Reference element should contain the identifier for the example being cited. For example, if a CVE is being cited, it should be of the standard CVE identifier format, such as CVE-2005-1951 or CVE-1999-0046. The required Description element should contain a product-independent description of the example being cited. The description should present an unambiguous correlation between the example being described and the weakness that it is meant to exemplify. It should also be short and easy to understand. The Link element should provide a valid URL where more information regarding this example can be obtained."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        Observed_Example
    
    
ObjectProperty: Observed_Example_Reference

    Characteristics: 
        Functional
    
    Domain: 
        Observed_Example
    
    Range: 
        <http://www.semanticweb.org/cht_c/nvd#CVE>
    
    
ObjectProperty: ParentOf

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    InverseOf: 
        ChildOf
    
    
ObjectProperty: PeerOf

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    
ObjectProperty: Potential_Mitigation

    Annotations: 
        rdfs:comment "The PotentialMitigationsType complex type is used to describe potential mitigations associated with a weakness. It contains one or more Mitigation elements, which each represent individual mitigations for the weakness. The Phase element indicates the development life cycle phase during which this particular mitigation may be applied. The Strategy element describes a general strategy for protecting a system to which this mitigation contributes. The Effectiveness element summarizes how effective the mitigation may be in preventing the weakness. The Description element contains a description of this individual mitigation including any strengths and shortcomings of this mitigation for the weakness.
The optional Mitigation_ID attribute is used by the internal CWE team to uniquely identify mitigations that are repeated across any number of individual weaknesses. To help make sure that the details of these common mitigations stay synchronized, the Mitigation_ID is used to quickly identify those mitigation elements across CWE that should be identical. The identifier is a string and should match the following format: MIT-1."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        Potential_Mitigation
    
    
ObjectProperty: Related_Attack_Pattern

    Annotations: 
        rdfs:comment "The RelatedAttackPatternsType complex type contains references to attack patterns associated with this weakness. The association implies those attack patterns may be applicable if an instance of this weakness exists. Each related attack pattern is identified by a CAPEC identifier."
    
    Domain: 
        Weakness
    
    Range: 
        capec:CAPEC
    
    
ObjectProperty: Related_Weakness

    Annotations: 
        rdfs:comment "The RelatedWeaknessesType complex type is used to refer to other weaknesses that differ only in their level of abstraction. It contains one or more Related_Weakness elements, each of which is used to link to the CWE identifier of the other Weakness. The nature of the relation is captured by the Nature attribute. Please see the RelatedNatureEnumeration simple type definition for details about the valid value and meanings. The optional Chain_ID attribute specifies the unique ID of a named chain that a CanFollow or CanPrecede relationship pertains to. The optional Ordinal attribute is used to determine if this relationship is the primary ChildOf relationship for this weakness for a given View_ID. This attribute can only have the value \"Primary\" and should only be included for the primary parent/child relationship. For each unique triple of &lt;Nature, CWE_ID, View_ID&gt;, there should be only one relationship that is given a \"Primary\" ordinal.
The RelatedNatureEnumeration simple type defines the different values that can be used to define the nature of a related weakness. A ChildOf nature denotes a related weakness at a higher level of abstraction. A ParentOf nature denotes a related weakness at a lower level of abstraction. The StartsWith, CanPrecede, and CanFollow relationships are used to denote weaknesses that are part of a chaining structure. The RequiredBy and Requires relationships are used to denote a weakness that is part of a composite weakness structure. The CanAlsoBe relationship denotes a weakness that, in the proper environment and context, can also be perceived as the target weakness. Note that the CanAlsoBe relationship is not necessarily reciprocal. The PeerOf relationship is used to show some similarity with the target weakness that does not fit any of the other type of relationships."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        Weakness
    
    
ObjectProperty: RequiredBy

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Weakness
    
    Range: 
        Composite
    
    InverseOf: 
        Requires
    
    
ObjectProperty: Requires

    SubPropertyOf: 
        Related_Weakness
    
    Domain: 
        Composite
    
    Range: 
        Weakness
    
    InverseOf: 
        RequiredBy
    
    
ObjectProperty: StartOfChain

    SubPropertyOf: 
        Related_Weakness
    
    Characteristics: 
        Functional
    
    Domain: 
        Weakness
    
    Range: 
        Chain
    
    InverseOf: 
        StartsWith
    
    
ObjectProperty: StartsWith

    SubPropertyOf: 
        Related_Weakness
    
    Characteristics: 
        Functional
    
    Domain: 
        Chain
    
    Range: 
        Weakness
    
    InverseOf: 
        StartOfChain
    
    
ObjectProperty: Taxonomy_Mapping

    Annotations: 
        rdfs:comment "The TaxonomyMappingsType complex type is used to provide a mapping from an entry (Weakness or Category) in CWE to an equivalent entry in a different taxonomy. The required Taxonomy_Name attribute identifies the taxonomy to which the mapping is being made. The Entry_ID and Entry_Name elements identify the ID and name of the entry which is being mapped. The Mapping_Fit element identifies how close the CWE is to the entry in the taxonomy."^^rdfs:Literal
    
    Domain: 
        Category or Weakness
    
    Range: 
        Taxonomy_Mapping
    
    
DataProperty: Affected_Resource

    Annotations: 
        rdfs:comment "The AffectedResourcesType complex type is used to identify system resources that can be affected by an exploit of this weakness. If multiple resources could be affected, then each should be defined by its own Affected_Resource element.
The ResourceEnumeration simple type defines different resources of a system."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        {"CPU" , "File or Directory" , "Memory" , "Other" , "System Process"}
    
    
DataProperty: Alternate_Term

    Annotations: 
        rdfs:comment "The AlternateTermsType complex type indicates one or more other names used to describe this weakness. The required Term element contains the actual alternate term. The required Description element provides context for each alternate term by which this weakness may be known."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        xsd:string
    
    
DataProperty: ArchitectureClass

    Annotations: 
        rdfs:comment "The ArchitectureClassEnumeration simple type contains a list of values corresponding to known classes of architectures. The value \"Architecture-Independent\" is used to associate with all architectures."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Architecture
    
    Range: 
        {"Architecture-Independent" , "Embedded" , "Microcomputer" , "Workstation"}
    
    
DataProperty: ArchitectureName

    Annotations: 
        rdfs:comment "The ArchitectureNameEnumeration simple type contains a list of values corresponding to known architectures."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Architecture
    
    Range: 
        {"ARM" , "Alpha" , "Itanium" , "Other" , "Power Architecture" , "SPARC" , "x86"}
    
    
DataProperty: Audience

    Annotations: 
        rdfs:comment "The AudienceType complex type provides a reference to the target stakeholders or groups for a view. For each stakeholder, the required Type element specifies the type of members that might be interested in the view. The required Description element provides some text describing what properties of the view this particular stakeholder might find useful.
The StakeholderEnumeration simple type defines the different types of users within the CWE community."^^rdfs:Literal
    
    Domain: 
        View
    
    Range: 
        {"Academic Researchers" , "Applied Researchers" , "Assessment Teams" , "Assessment Tool Vendors" , "CWE Team" , "Educators" , "Hardware Designers" , "Information Providers" , "Other" , "Product Customers" , "Product Vendors" , "Software Developers" , "Vulnerability Analysts"}
    
    
DataProperty: Consequence_ID

    Characteristics: 
        Functional
    
    Domain: 
        Consequence
    
    Range: 
        xsd:string
    
    
DataProperty: Demonstrative_Example_ID

    Characteristics: 
        Functional
    
    Domain: 
        Demonstrative_Example
    
    Range: 
        xsd:string
    
    
DataProperty: Detection_Effectiveness

    Annotations: 
        rdfs:comment "The DetectionEffectivenessEnumeration simple type defines the different levels of effectiveness that a detection method may have in detecting an associated weakness. The value \"High\" is used to describe a method that succeeds frequently and does not result in many false reports. The value \"Moderate\" is used to describe a method that is applicable to multiple circumstances, but it may not have complete coverage of the weakness, or it may result in a number of incorrect reports. The \"SOAR Partial\" value means that according to SOAR this method can be cost-effective for partial coverage of the objective. The value \"Opportunistic\" is used to describe a method that does not directly target the weakness but may still succeed by chance, rather than in a reliable manner. The value \"Limited\" is used to describe a method that may be useful in limited circumstances, only applicable to a subset of potential instances of a given weakness type, requires training/customization, or gives limited visibility. Even in its limited capacity, this may be part of a good defense in depth strategy. The value \"None\" is used to describe a method that is highly unlikely to work. However, it may be included in an entry to emphasize common, yet incorrect, methods that developers might introduce."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Detection_Method
    
    Range: 
        {"High" , "Limited" , "Moderate" , "None" , "Opportunistic" , "SOAR Partial"}
    
    
DataProperty: Detection_Method_ID

    Characteristics: 
        Functional
    
    Domain: 
        Detection_Method
    
    Range: 
        xsd:string
    
    
DataProperty: Effectiveness

    Annotations: 
        rdfs:comment "The EffectivenessEnumeration simple type defines the different values related to how effective a mitigation may be in preventing the weakness. A value of \"High\" means the mitigation is frequently successful in eliminating the weakness entirely. A value of \"Moderate\" means the mitigation will prevent the weakness in multiple forms, but it does not have complete coverage of the weakness. A value of \"Limited\" means the mitigation may be useful in limited circumstances, or it is only applicable to a subset of potential errors of this weakness type. A value of \"Incidental\" means the mitigation is generally not effective and will only provide protection by chance, rather than in a reliable manner. A value of \"Defense in Depth\" means the mitigation may not necessarily prevent the weakness, but it may help to minimize the potential impact of an attacker exploiting the weakness."
    
    Characteristics: 
        Functional
    
    Domain: 
        Potential_Mitigation
    
    Range: 
        {"Defense in Depth" , "Discouraged Common Practice" , "High" , "Incidental" , "Limited" , "Moderate" , "None"}
    
    
DataProperty: Entry_ID

    Characteristics: 
        Functional
    
    Domain: 
        Taxonomy_Mapping
    
    Range: 
        xsd:string
    
    
DataProperty: Entry_Name

    Characteristics: 
        Functional
    
    Domain: 
        Taxonomy_Mapping
    
    Range: 
        xsd:string
    
    
DataProperty: Functional_Area

    Annotations: 
        rdfs:comment "The FunctionalAreasType complex type contains one or more functional_area elements, each of which identifies the functional area in which the weakness is most likely to occur. For example, CWE-23: Relative Path Traversal may occur in functional areas of software related to file processing. Each applicable functional area should have a new Functional_Area element, and standard title capitalization should be applied to each area.
The FunctionalAreaEnumeration simple type defines the different functional areas in which the weakness may appear. The value \"Functional-Area-Independent\" is used to associate with all functional areas."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        {"Authentication" , "Authorization" , "Clock" , "Code Libraries" , "Counters" , "Cryptography" , "Error Handling" , "File Processing" , "Functional-Area-Independent" , "Interprocess Communication" , "Logging" , "Memory Management" , "Networking" , "Number Processing" , "Power" , "Program Invocation" , "Protection Mechanism" , "Session Management" , "Signals" , "String Processing"}
    
    
DataProperty: ID

    Characteristics: 
        Functional
    
    Domain: 
        Category or View or Weakness
    
    Range: 
        xsd:positiveInteger
    
    
DataProperty: Impact

    Annotations: 
        rdfs:comment "The TechnicalImpactEnumeration simple type describes the technical impacts that can arise if an adversary successfully exploits a weakness."^^rdfs:Literal
    
    Domain: 
        Consequence
    
    Range: 
        {"Alter Execution Logic" , "Bypass Protection Mechanism" , "DoS: Amplification" , "DoS: Crash, Exit, or Restart" , "DoS: Instability" , "DoS: Resource Consumption (CPU)" , "DoS: Resource Consumption (Memory)" , "DoS: Resource Consumption (Other)" , "Execute Unauthorized Code or Commands" , "Gain Privileges or Assume Identity" , "Hide Activities" , "Modify Application Data" , "Modify Files or Directories" , "Modify Memory" , "Other" , "Quality Degradation" , "Read Application Data" , "Read Files or Directories" , "Read Memory" , "Reduce Maintainability" , "Reduce Performance" , "Reduce Reliability" , "Unexpected State" , "Varies by Context"}
    
    
DataProperty: Language

    Characteristics: 
        Functional
    
    Domain: 
        Example_Code
    
    Range: 
        {"ASP" , "ASP.NET" , "Ada" , "Basic" , "C" , "C#" , "C++" , "COBOL" , "F#" , "Fortran" , "Go" , "HTML" , "JSP" , "Java" , "JavaScript" , "Objective-C" , "Other" , "PHP" , "Pascal" , "Perl" , "Python" , "Ruby" , "Rust" , "SQL" , "Shell" , "Swift" , "VB.NET" , "VHDL" , "Verilog" , "XML"}
    
    
DataProperty: LanguageClass

    Annotations: 
        rdfs:comment "The LanguageClassEnumeration simple type contains a list of values corresponding to different classes of source code languages. The value \"Language-Independent\" is used to associate with all languages."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Language
    
    Range: 
        {"Assembly" , "Compiled" , "Interpreted" , "Language-Independent"}
    
    
DataProperty: LanguageName

    Annotations: 
        rdfs:comment "The LanguageNameEnumeration simple type contains a list of values corresponding to different source code languages."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Language
    
    Range: 
        {"ASP" , "ASP.NET" , "Ada" , "Basic" , "C" , "C#" , "C++" , "COBOL" , "F#" , "Fortran" , "Go" , "HTML" , "JSP" , "Java" , "JavaScript" , "Objective-C" , "Other" , "PHP" , "Pascal" , "Perl" , "Python" , "Ruby" , "Rust" , "SQL" , "Shell" , "Swift" , "VB.NET" , "VHDL" , "Verilog" , "XML"}
    
    
DataProperty: Likelihood

    Characteristics: 
        Functional
    
    Domain: 
        Consequence
    
    Range: 
        {"High" , "Low" , "Medium" , "Unknown"}
    
    
DataProperty: Likelihood_Of_Exploit

    Annotations: 
        rdfs:comment "The LikelihoodEnumeration simple type contains a list of values corresponding to different likelihoods. The value \"Unknown\" should be used when the actual likelihood of something occurring is not known."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Weakness
    
    Range: 
        {"High" , "Low" , "Medium" , "Unknown"}
    
    
DataProperty: Link

    Characteristics: 
        Functional
    
    Domain: 
        Observed_Example
    
    Range: 
        xsd:anyURI
    
    
DataProperty: Mapping_Fit

    Annotations: 
        rdfs:comment "The TaxonomyMappingFitEnumeration simple type defines the different values used to describe how close a certain mapping to CWE is."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Taxonomy_Mapping
    
    Range: 
        {"CWE More Abstract" , "CWE More Specific" , "Exact" , "Imprecise" , "Perspective"}
    
    
DataProperty: Method

    Annotations: 
        rdfs:comment "The DetectionMethodEnumeration simple type defines the different methods used to detect a weakness."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Detection_Method
    
    Range: 
        {"Architecture or Design Review" , "Automated Analysis" , "Automated Dynamic Analysis" , "Automated Static Analysis" , "Automated Static Analysis - Binary or Bytecode" , "Automated Static Analysis - Source Code" , "Black Box" , "Dynamic Analysis with Automated Results Interpretation" , "Dynamic Analysis with Manual Results Interpretation" , "Formal Verification" , "Fuzzing" , "Manual Analysis" , "Manual Dynamic Analysis" , "Manual Static Analysis" , "Manual Static Analysis - Binary or Bytecode" , "Manual Static Analysis - Source Code" , "Other" , "Simulation / Emulation" , "White Box"}
    
    
DataProperty: Mitigation_ID

    Characteristics: 
        Functional
    
    Domain: 
        Potential_Mitigation
    
    Range: 
        xsd:string
    
    
DataProperty: Mode_Of_Introduction

    Annotations: 
        rdfs:comment "The ModeOfIntroductionType complex type is used to provide information about how and when a given weakness may be introduced. If there are multiple possible introduction points, then a separate Introduction element should be included for each. The required Phase element identifies the point in the product life cycle at which the weakness may be introduced. The optional Note element identifies the typical scenarios under which the weakness may be introduced during the given phase.
The PhaseEnumeration simple type lists different phases in the product life cycle."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        {"Architecture and Design" , "Build and Compilation" , "Bundling" , "Distribution" , "Documentation" , "Implementation" , "Installation" , "Integration" , "Manufacturing" , "Operation" , "Patching and Maintenance" , "Policy" , "Porting" , "Requirements" , "System Configuration" , "Testing"}
    
    
DataProperty: Name

    Characteristics: 
        Functional
    
    Domain: 
        Category or View or Weakness
    
    Range: 
        xsd:string
    
    
DataProperty: Nature

    Characteristics: 
        Functional
    
    Domain: 
        Example_Code
    
    Range: 
        {"attack" , "bad" , "good" , "informative" , "mitigation" , "result"}
    
    
DataProperty: OperatingSystemClass

    Annotations: 
        rdfs:comment "The OperatingSystemClassEnumeration simple type contains a list of values corresponding to different classes of operating systems. The value \"OS-Independent\" is used to associate with all operating systems."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Operating_System
    
    Range: 
        {"Linux" , "OS-Independent" , "Unix" , "Windows" , "macOS"}
    
    
DataProperty: OperatingSystemName

    Annotations: 
        rdfs:comment "The OperatingSystemNameEnumeration simple type contains a list of values corresponding to different operating systems."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Operating_System
    
    Range: 
        {"AIX" , "Android" , "BlackBerry OS" , "Chrome OS" , "Darwin" , "FreeBSD" , "NetBSD" , "OpenBSD" , "Red Hat" , "SUSE" , "Solaris" , "Ubuntu" , "Windows 9x" , "Windows Embedded" , "Windows NT" , "iOS" , "macOS" , "tvOS" , "watchOS"}
    
    
DataProperty: Ordinal

    Annotations: 
        rdfs:comment "The OrdinalEnumeration simple type contains a list of values used to determine if a relationship is the primary relationship for a given weakness entry within a given view. Currently, this attribute can only have the value \"Primary\"."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Range: 
        {"Primary"}
    
    
DataProperty: Phase

    Annotations: 
        rdfs:comment "The PhaseEnumeration simple type lists different phases in the product life cycle."^^rdfs:Literal
    
    Domain: 
        Potential_Mitigation
    
    Range: 
        {"Architecture and Design" , "Build and Compilation" , "Bundling" , "Distribution" , "Documentation" , "Implementation" , "Installation" , "Integration" , "Manufacturing" , "Operation" , "Patching and Maintenance" , "Policy" , "Porting" , "Requirements" , "System Configuration" , "Testing"}
    
    
DataProperty: Prevalence

    Annotations: 
        rdfs:comment "The PrevalenceEnumeration simple type defines the different regularities that guide the applicability of platforms."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Applicable_Platform
    
    Range: 
        {"Often" , "Rarely" , "Sometimes" , "Undetermined"}
    
    
DataProperty: Scope

    Annotations: 
        rdfs:comment "The ScopeEnumeration simple type defines the different areas of security that can be affected by exploiting a weakness."^^rdfs:Literal
    
    Domain: 
        Consequence
    
    Range: 
        {"Access Control" , "Accountability" , "Authentication" , "Authorization" , "Availability" , "Confidentiality" , "Integrity" , "Non-Repudiation" , "Other"}
    
    
DataProperty: Strategy

    Annotations: 
        rdfs:comment "The MitigationStrategyEnumeration simple type lists general strategies for protecting a system to which a mitigation contributes."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Potential_Mitigation
    
    Range: 
        {"Attack Surface Reduction" , "Compilation or Build Hardening" , "Enforcement by Conversion" , "Environment Hardening" , "Firewall" , "Input Validation" , "Language Selection" , "Libraries or Frameworks" , "Output Encoding" , "Parameterization" , "Refactoring" , "Resource Limitation" , "Sandbox or Jail" , "Separation of Privilege"}
    
    
DataProperty: Taxonomy_Name

    Annotations: 
        rdfs:comment "The TaxonomyNameEnumeration simple type lists the different known taxomomies that can be mapped to CWE."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Taxonomy_Mapping
    
    Range: 
        {"19 Deadly Sins" , "7 Pernicious Kingdoms" , "Aslam" , "Bishop" , "CERT C Secure Coding" , "CERT C++ Secure Coding" , "CLASP" , "Landwehr" , "OMG ASCMM" , "OMG ASCPEM" , "OMG ASCRM" , "OMG ASCSM" , "OWASP Top Ten" , "OWASP Top Ten 2004" , "OWASP Top Ten 2007" , "PLOVER" , "Protection Analysis" , "RISOS" , "SEI CERT C Coding Standard" , "SEI CERT C++ Coding Standard" , "SEI CERT Oracle Coding Standard for Java" , "SEI CERT Perl Coding Standard" , "Software Fault Patterns" , "The CERT Oracle Secure Coding Standard for Java (2011)" , "WASC" , "Weber, Karger, Paradkar"}
    
    
DataProperty: TechnologyClass

    Annotations: 
        rdfs:comment "The TechnologyClassEnumeration simple type contains a list of values corresponding to different classes of technologies. The value \"Technology-Independent\" is used to associate with all technologies.
Notes:
- Client Server represents technology involving a distributed application but for the purposes of CWE does not leverage a web browser.
- Cloud Computing represents technology that involves data storage and computing power being made available to multiple users via the internet instead of using local systems, without the need for users to perform all system management themselves.
- System on Chip represents technology that integrates all components of a computer within a single integrated circuit, to include FPGA and ASIC.
- Web Based represents technology that involves applications or single-page sites that leverage a web browser to support client interactions.
- Technology-Independent\" is used to associate with all classes of technologies."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Technology
    
    Range: 
        {"Client Server" , "Cloud Computing" , "Mainframe" , "Mobile" , "N-Tier" , "SOA" , "System on Chip" , "Technology-Independent" , "Web Based"}
    
    
DataProperty: TechnologyName

    Annotations: 
        rdfs:comment "The TechnologyNameEnumeration simple type contains a list of values corresponding to different technologies. A technology represents a generally accepted feature of a system and often refers to a high-level functional component within a system.
Within this context, \"IP\" stands for \"Intellectual Property\" and is the term used to distinguish unique blocks within a System on Chip, with each block potentially coming from a different source.
Notes:
- Accelerator IP dedicated to offload a specific workload to enhance performance: DSP, packet processing, mathematical, compression, etc.
- Analog and Mixed Signal IP that controls/senses the electricals for communication which receives/transmits signals conditioned outside of a system’s digital domain.
- Audio/Video IP designed to manipulate audio/video data: coders/decoders, speech recognition, format converters, etc.
- Bus/Interface IP implementing an interconnect among elements in a computing system: I2C, PCIe, DDR, MMC, USB, GPIO, NoC, etc.
- Clock/Counter IP reflecting the passage of time in oscillations or human units: Real Time Clock, Watchdog, Monotonic Counter, etc.
- Communication IP designed to transmit/receive information: Modulator/Demodulator, GPS, 802.11, Bluetooth, CDMA/DSM, etc.
- Controller IP circuit hard-wired (e.g., an FSM) to react in a closed-loop control system or other limited context, to control another entity: Arbiter, APIC, USB, Peripheral, Memory, Storage, etc.
- Memory IP implementing volatile (transient) data storage: DRAM, SRAM, etc.
- Microcontroller IP implementing a specialized processor acting as a programmable controller.
- Power Management IP that controls and/or monitors the power state of a system: voltage regulators, power controllers, power monitors, etc.
- Processor IP implementing a general-purpose computing engine: CPU, GPU, RISC, CISC, etc.
- Security IP designed to protect assets: cryptography, auth, tamper detection, etc.
- Test/Debug IP designed to verify functionality and identify root cause of defects: JTAG, BIST, boundary scan, pattern generator, etc."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Technology
    
    Range: 
        {"Accelerator IP" , "Analog and Mixed Signal IP" , "Audio/Video IP" , "Bus/Interface IP" , "Clock/Counter IP" , "Communication IP" , "Controller IP" , "Database Server" , "Memory IP" , "Microcontroller IP" , "Network on Chip IP" , "Other" , "Power Management IP" , "Processor IP" , "Security IP" , "Sensor IP" , "Storage IP" , "Test/Debug IP" , "Web Server"}
    
    
DataProperty: Type

    Annotations: 
        rdfs:comment "The NoteTypeEnumeration simple type defines the different types of notes that can be associated with a weakness. An \"Applicable Platform\" note provides additional information about the list of applicable platforms for a given weakness. A \"Maintenance\" note contains significant maintenance tasks within this entry that still need to be addressed, such as clarifying the concepts involved or improving relationships. A \"Relationship\" note provides clarifying details regarding the relationships between entities. A \"Research Gap\" note identifies potential opportunities for the vulnerability research community to conduct further exploration of issues related to this weakness. It is intended to highlight parts of CWE that have not received sufficient attention from researchers. A \"Terminology\" note contains a discussion of terminology issues related to this weakness, or clarifications when there is no established terminology, or if there are multiple uses of the same key term. It is different from the Alternate_Terms element, which is focused on specific terms that are commonly used. A \"Theoretical\" note describes the weakness using vulnerability theory concepts. It should be provided as needed, especially in cases where the application of vulnerability theory is not necessarily obvious for the weakness."^^rdfs:Literal
    
    Characteristics: 
        Functional
    
    Domain: 
        Note
    
    Range: 
        {"Applicable Platform" , "Maintenance" , "Other" , "Relationship" , "Research Gap" , "Terminology" , "Theoretical"}
    
    
DataProperty: Version

    Characteristics: 
        Functional
    
    Domain: 
        Operating_System
    
    Range: 
        xsd:string
    
    
DataProperty: Weakness_Ordinality

    Annotations: 
        rdfs:comment "The WeaknessOrdinalitiesType complex type indicates potential ordering relationships with other weaknesses. The required Ordinality element identifies whether the weakness has a primary, resultant, or indirect relationship. The optional Description contains the context in which the relationship exists. It is important to note that it is possible for the same entry to be primary in some instances and resultant in others.
The OrdinalityEnumeration simple type contains a list of values used to indicates potential ordering relationships with other weaknesses. A primary relationship means the weakness exists independent of other weaknesses, while a resultant relationship is when a weakness exists only in the presence of some other weaknesses. An indirect relationship means the weakness does not directly lead to security-relevant weaknesses but is a quality issue that might indirectly make it easier to introduce security-relevant weaknesses or make them more difficult to detect."^^rdfs:Literal
    
    Domain: 
        Weakness
    
    Range: 
        {"Indirect" , "Primary" , "Resultant"}
    
    
Class: <http://www.semanticweb.org/cht_c/nvd#CVE>

    
Class: Applicable_Platform

    Annotations: 
        rdfs:comment "The ApplicablePlatformsType complex type specifies the languages, operating systems, architectures, and technologies in which a given weakness could appear. A technology represents a generally accepted feature of a system and often refers to a high-level functional component within a system. The required Prevalence attribute identifies the regularity with which the weakness is applicable to that platform. When providing an operating system name, an optional Common Platform Enumeration (CPE) identifier can be used to a identify a specific OS."^^rdfs:Literal
    
    
Class: Architecture

    SubClassOf: 
        Applicable_Platform
    
    
Class: Base

    SubClassOf: 
        Weakness
    
    
Class: Category

    Annotations: 
        rdfs:comment "A category is a collection of weaknesses based on some common characteristic or attribute. The shared attribute may be any number of things including, but not limited to, environment (J2EE, .NET), functional area (authentication, cryptography) and the relevant resource (credentials management, certificate issues). A Category is used primarily as an organizational mechanism for CWE and should not be mapped to by external sources.
The required Summary element contains the key points that define the category and helps the user understand what the category is attempting to be. The optional Relationships element is used to define relationships (Member_Of and Has_Member) with other weaknesses, categories, and views. The optional Taxonomy_Mappings element is used to relate this category to similar categories in taxomomies outside of CWE. The optional References element is used to provide further reading and insight into this category. This element should be used when the category is based on external sources or projects. The optional Notes element is used to provide additional comments or clarifications that cannot be captured using the other elements of the category. The optional Content_History element is used to keep track of the original author of the category and any subsequent modifications to the content. This provides a means of contacting the authors and modifiers for clarifying ambiguities, or in merging overlapping contributions.
The required ID attribute provides a unique identifier for the category. It is meant to be static for the lifetime of the category. If the category becomes deprecated, the ID should not be reused, and a placeholder for the deprecated category should be left in the catalog. The required Name attribute provides a descriptive title used to give the reader an idea of what characteristics this category represents. All words in the name should be capitalized except for articles and prepositions unless they begin or end the name. The required Status attribute defines the maturity of the information for this category. Please refer to the StatusEnumeration simple type for a list of valid values and their meanings."
    
    
Class: Chain

    SubClassOf: 
        Compound
    
    
Class: Class

    SubClassOf: 
        Weakness
    
    
Class: Composite

    SubClassOf: 
        Compound
    
    
Class: Compound

    SubClassOf: 
        Structure
    
    DisjointUnionOf: 
        Chain, Composite
    
    
Class: Consequence

    Annotations: 
        rdfs:comment "The CommonConsequencesType complex type is used to specify individual consequences associated with a weakness. The required Scope element identifies the security property that is violated. The optional Impact element describes the technical impact that arises if an adversary succeeds in exploiting this weakness. The optional Likelihood element identifies how likely the specific consequence is expected to be seen relative to the other consequences. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact. The optional Note element provides additional commentary about a consequence.
The optional Consequence_ID attribute is used by the internal CWE team to uniquely identify examples that are repeated across any number of individual weaknesses. To help make sure that the details of these common examples stay synchronized, the Consequence_ID is used to quickly identify those examples across CWE that should be identical. The identifier is a string and should match the following format: CC-1."^^rdfs:Literal
    
    
Class: Demonstrative_Example

    Annotations: 
        rdfs:comment "The DemonstrativeExamplesType complex type contains one or more Demonstrative_Example elements, each of which contains an example illustrating how a weakness may look in actual code. The optional Title_Text element provides a title for the example. The Intro_Text element describes the context and setting in which this code should be viewed, summarizing what the code is attempting to do. The Body_Text and Example_Code elements are a mixture of code and explanatory text about the example. The References element provides additional information.
The optional Demonstrative_Example_ID attribute is used by the internal CWE team to uniquely identify examples that are repeated across any number of individual weaknesses. To help make sure that the details of these common examples stay synchronized, the Demonstrative_Example_ID is used to quickly identify those examples across CWE that should be identical. The identifier is a string and should match the following format: DX-1.
The StructuredCodeType complex type is used to present source code examples. It allows embedded XHTML content to enable formatting of the source code. The required Nature attribute states what type of code the example shows.  The optional Language attribute states which source code language is used in the example. This is mostly appropriate when the Nature is \"good\" or \"bad\"."^^rdfs:Literal
    
    
Class: Deprecated

    SubClassOf: 
        Status
    
    
Class: Detection_Method

    Annotations: 
        rdfs:comment "The DetectionMethodsType complex type is used to identify methods that may be employed to detect this weakness, including their strengths and limitations. The required Method element identifies the particular detection method being described. The required Description element is intended to provide some context of how this method can be applied to a specific weakness. The optional Effectiveness element says how effective the detection method may be in detecting the associated weakness. This assumes the use of best-of-breed tools, analysts, and methods. There is limited consideration for financial costs, labor, or time. The optional Effectiveness_Notes element provides additional discussion of the strengths and shortcomings of this detection method.
The optional Detection_Method_ID attribute is used by the internal CWE team to uniquely identify methods that are repeated across any number of individual weaknesses. To help make sure that the details of these common methods stay synchronized, the Detection_Method_ID is used to quickly identify those Detection_Method elements across CWE that should be identical. The identifier is a string and should match the following format: DM-1."^^rdfs:Literal
    
    
Class: Draft

    SubClassOf: 
        Status
    
    
Class: Example_Code

    
Class: Explicit

    SubClassOf: 
        View
    
    
Class: Graph

    SubClassOf: 
        View
    
    
Class: Implicit

    SubClassOf: 
        View
    
    
Class: Incomplete

    SubClassOf: 
        Status
    
    
Class: Language

    SubClassOf: 
        Applicable_Platform
    
    
Class: Note

    Annotations: 
        rdfs:comment "The NotesType complex type contains one or more Note elements, each of which is used to provide any additional comments about an entry that cannot be captured using other elements."^^rdfs:Literal
    
    
Class: Observed_Example

    Annotations: 
        rdfs:comment "The ObservedExampleType complex type specifies references to a specific observed instance of a weakness in real-world products. Typically this will be a CVE reference. Each Observed_Example element represents a single example. The optional Reference element should contain the identifier for the example being cited. For example, if a CVE is being cited, it should be of the standard CVE identifier format, such as CVE-2005-1951 or CVE-1999-0046. The required Description element should contain a product-independent description of the example being cited. The description should present an unambiguous correlation between the example being described and the weakness that it is meant to exemplify. It should also be short and easy to understand. The Link element should provide a valid URL where more information regarding this example can be obtained."^^rdfs:Literal
    
    
Class: Obsolete

    SubClassOf: 
        Status
    
    
Class: Operating_System

    SubClassOf: 
        Applicable_Platform
    
    
Class: Pillar

    SubClassOf: 
        Weakness
    
    
Class: Potential_Mitigation

    Annotations: 
        rdfs:comment "The PotentialMitigationsType complex type is used to describe potential mitigations associated with a weakness. It contains one or more Mitigation elements, which each represent individual mitigations for the weakness. The Phase element indicates the development life cycle phase during which this particular mitigation may be applied. The Strategy element describes a general strategy for protecting a system to which this mitigation contributes. The Effectiveness element summarizes how effective the mitigation may be in preventing the weakness. The Description element contains a description of this individual mitigation including any strengths and shortcomings of this mitigation for the weakness.
The optional Mitigation_ID attribute is used by the internal CWE team to uniquely identify mitigations that are repeated across any number of individual weaknesses. To help make sure that the details of these common mitigations stay synchronized, the Mitigation_ID is used to quickly identify those mitigation elements across CWE that should be identical. The identifier is a string and should match the following format: MIT-1."^^rdfs:Literal
    
    
Class: Simple

    SubClassOf: 
        Structure
    
    
Class: Stable

    SubClassOf: 
        Status
    
    
Class: Status

    Annotations: 
        rdfs:comment "The StatusEnumeration simple type defines the different status values that an entity (view, category, weakness) can have. A value of Deprecated refers to an entity that has been removed from CWE, likely because it was a duplicate or was created in error. A value of Obsolete is used when an entity is still valid but no longer is relevant, likely because it has been superseded by a more recent entity.  A value of Incomplete means that the entity does not have all important elements filled, and there is no guarantee of quality.  A value of Draft refers to an entity that has all important elements filled, and critical elements such as Name and Description are reasonably well-written; the entity may still have important problems or gaps.  A value of Usable refers to an entity that has received close, extensive review, with critical elements verified.  A value of Stable indicates that all important elements have been verified, and the entry is unlikely to change significantly in the future. Note that the quality requirements for Draft and Usable status are very resource-intensive to accomplish, while some Incomplete and Draft entries are actively used by the general public; so, this status enumeration might change in the future."^^rdfs:Literal
    
    DisjointUnionOf: 
        Category, View, Weakness
    
    DisjointUnionOf: 
        Deprecated, Draft, Incomplete, Obsolete, Stable, Usable
    
    
Class: Structure

    Annotations: 
        rdfs:comment "The StructureEnumeration simple type lists the different structural natures of a weakness. A Simple structure represents a single weakness whose exploitation is not dependent on the presence of another weakness. A Composite is a set of weaknesses that must all be present simultaneously in order to produce an exploitable vulnerability, while a Chain is a set of weaknesses that must be reachable consecutively in order to produce an exploitable vulnerability."^^rdfs:Literal
    
    EquivalentTo: 
        Weakness
    
    DisjointUnionOf: 
        Compound, Simple
    
    
Class: Taxonomy_Mapping

    Annotations: 
        rdfs:comment "The TaxonomyMappingsType complex type is used to provide a mapping from an entry (Weakness or Category) in CWE to an equivalent entry in a different taxonomy. The required Taxonomy_Name attribute identifies the taxonomy to which the mapping is being made. The Entry_ID and Entry_Name elements identify the ID and name of the entry which is being mapped. The Mapping_Fit element identifies how close the CWE is to the entry in the taxonomy."^^rdfs:Literal
    
    
Class: Technology

    SubClassOf: 
        Applicable_Platform
    
    
Class: Usable

    SubClassOf: 
        Status
    
    
Class: Variant

    SubClassOf: 
        Weakness
    
    
Class: View

    Annotations: 
        rdfs:comment "A view represents a perspective with which one might look at the weaknesses in the catalog. There are three different types of views as defined by the type attribute: graphs, explicit slices, and implicit slices. The members of a view are either defined externally through the members element (in the case of a graph or an explicit slice) or by the optional filter element (in the case of an implicit slice).
The required Objective element describes the perspective from which the view has been constructed. The optional Audience element provides a reference to the target stakeholders or groups for whom the view is most relevant. The optional Members element is used to define Member_Of relationships with categories. The optional Filter element is only used for implicit slices (see the Type attribute) and holds an XSL query for identifying which entries are members of the view. The optional References element is used to provide further reading and insight into this view. This element should be used when the view is based on external sources or projects. The optional Notes element is used to provide any additional comments that cannot be captured using the other elements of the view. The optional Content_History element is used to keep track of the original author of the view and any subsequent modifications to the content. This provides a means of contacting the authors and modifiers for clarifying ambiguities, or in merging overlapping contributions.
The required ID attribute provides a unique identifier for the view. It is meant to be static for the lifetime of the view. If the view becomes deprecated, the ID should not be reused, and a placeholder for the deprecated view should be left in the catalog. The required Name attribute provides a descriptive title used to give the reader an idea of what perspective this view represents. All words in the name should be capitalized except for articles and prepositions, unless they begin or end the name. The required Type attribute describes how this view is being constructed. Please refer to the ViewTypeEnumeration simple type for a list of valid values and their meanings. The required Status attribute defines the maturity of the information for this view. Please refer to the StatusEnumeration simple type for a list of valid values and their meanings.
The ViewTypeEnumeration simple type defines the different types of views that can be found within CWE. A graph is a hierarchical representation of weaknesses based on a specific vantage point that a user may take. The hierarchy often starts with a category, followed by a class/base weakness, and ends with a variant weakness. In addition to graphs, a view can be a slice, which is a flat list of entries that does not specify any relationships between those entries. An explicit slice is a subset of weaknesses that are related through some external factor. For example, an explicit slice may be used to represent mappings to external groupings like a Top-N list. An implicit slice is a subset of weaknesses that are related through a specific attribute, as indicated by the Filter element of the View. For example, an implicit slice may refer to all weaknesses in draft status, or all class level weaknesses."^^rdfs:Literal
    
    DisjointUnionOf: 
        Explicit, Graph, Implicit
    
    
Class: Weakness

    Annotations: 
        rdfs:comment "A weakness is a mistake or condition that, if left unaddressed, could under the proper conditions contribute to a cyber-enabled capability being vulnerable to attack, allowing an adversary to make items function in unintended ways. This complexType is used to describe a specific type of weakness and provide a variety of information related to it.
The required Description should be short and limited to the key points that define this weakness. The optional Extended_Description element provides a place for additional details important to this weakness, but that are not necessary to convey the fundamental concept behind the weakness. A number of other optional elements are available, each of which is described in more detail within the corresponding complexType that it references.
The required ID attribute provides a unique identifier for the entry. It is considered static for the lifetime of the entry. If this entry becomes deprecated, the identifier will not be reused. The required Name attribute is a string that identifies the entry. The name should focus on the weakness being described and should avoid mentioning the attack that exploits the weakness or the consequences of exploiting the weakness. All words in the entry name should be capitalized except for articles and prepositions, unless they begin or end the name. Subsequent words in a hyphenated chain are also not capitalized. The required Abstraction attribute defines the abstraction level for this weakness. The required Structure attribute defines the structural nature of the weakness. The required Status attribute defines the maturity of the information for this weakness."^^rdfs:Literal
    
    EquivalentTo: 
        Structure
    
    DisjointUnionOf: 
        Base, Class, Pillar, Variant
    
    
Class: capec:CAPEC

    
Class: cpe:CPEEntry

    
DisjointClasses: 
    Category,View,Weakness

